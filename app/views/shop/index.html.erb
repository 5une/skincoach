<div class="min-h-screen flex items-center justify-center p-4 relative overflow-hidden">
  <div class="absolute inset-0 -z-10">
    <div class="absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-yellow-300/25 to-amber-400/20 rounded-full blur-3xl animate-float"></div>
    <div class="absolute top-40 right-20 w-24 h-24 bg-gradient-to-br from-blue-400/25 to-cyan-400/20 rounded-full blur-3xl animate-float-delayed"></div>
    <div class="absolute bottom-32 left-1/4 w-40 h-40 bg-gradient-to-br from-pink-400/25 to-rose-400/20 rounded-full blur-3xl animate-float-slow"></div>
    <div class="absolute bottom-20 right-1/3 w-28 h-28 bg-gradient-to-br from-blue-500/20 to-indigo-400/25 rounded-full blur-3xl animate-float"></div>
    <div class="absolute top-1/3 left-1/2 w-36 h-36 bg-gradient-to-br from-yellow-400/20 to-orange-300/25 rounded-full blur-3xl animate-float-delayed"></div>
    <div class="absolute top-60 left-20 w-20 h-20 bg-gradient-to-br from-pink-300/25 to-purple-400/20 rounded-full blur-3xl animate-float-slow"></div>
    <div class="absolute bottom-40 right-10 w-30 h-30 bg-gradient-to-br from-cyan-300/20 to-blue-400/25 rounded-full blur-3xl animate-float"></div>
    <div class="absolute top-80 right-1/4 w-26 h-26 bg-gradient-to-br from-amber-300/25 to-yellow-400/20 rounded-full blur-3xl animate-float-delayed"></div>
  </div>
  <div class="w-full max-w-2xl mx-auto relative z-10" data-np-autofill-form-type="other" data-np-checked="1" data-np-watching="1">
    <div class="text-center mb-8">
      <div class="flex items-center justify-center gap-2 mb-4">
        <div class="w-12 h-12 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center glass">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-sparkles w-6 h-6 text-primary-foreground">
            <path d="M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z"></path>
            <path d="M20 3v4"></path>
            <path d="M22 5h-4"></path>
            <path d="M4 17v2"></path>
            <path d="M5 18H3"></path>
          </svg>
        </div>
      </div>
      <h1 class="text-3xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent mb-2">Skin Aesthetics Expert</h1>
      <p class="text-muted-foreground">Your personal skincare consultant for healthy, radiant skin</p>
    </div>
    <div data-slot="card" class="text-card-foreground flex flex-col gap-6 rounded-xl py-6 glass-card-enhanced border-0 shadow-2xl backdrop-blur-xl bg-background/30">
      <div class="h-96 overflow-y-auto p-6 space-y-4">
        <div class="flex justify-start">
          <div class="max-w-[80%] rounded-2xl px-4 py-3 glass-message border border-border/30 mr-4 backdrop-blur-sm bg-background/20">
            <p class="text-sm leading-relaxed">Hi, I'm Emma. I help people understand their skin better and find the right approach for their concerns. What's going on with your skin that you'd like to talk about?</p>
            <span class="text-xs opacity-70 mt-1 block">05:32 PM</span>
          </div>
        </div>
      </div>
      <div class="px-6 pb-4">
        <div class="flex flex-wrap gap-2">
          <button data-slot="button" class="inline-flex items-center justify-center whitespace-nowrap font-medium disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border shadow-xs dark:bg-input/30 dark:border-input dark:hover:bg-input/50 h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5 glass border-border/30 hover:bg-white/20 hover:border-border/50 hover:text-current bg-transparent backdrop-blur-sm text-xs transition-all duration-200">What's the best skincare routine for my age?</button>
          <button data-slot="button" class="inline-flex items-center justify-center whitespace-nowrap font-medium disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border shadow-xs dark:bg-input/30 dark:border-input dark:hover:bg-input/50 h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5 glass border-border/30 hover:bg-white/20 hover:border-border/50 hover:text-current bg-transparent backdrop-blur-sm text-xs transition-all duration-200">How to treat acne and breakouts?</button>
          <button data-slot="button" class="inline-flex items-center justify-center whitespace-nowrap font-medium disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border shadow-xs dark:bg-input/30 dark:border-input dark:hover:bg-input/50 h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5 glass border-border/30 hover:bg-white/20 hover:border-border/50 hover:text-current bg-transparent backdrop-blur-sm text-xs transition-all duration-200">Recommend anti-aging products</button>
          <button data-slot="button" class="inline-flex items-center justify-center whitespace-nowrap font-medium disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border shadow-xs dark:bg-input/30 dark:border-input dark:hover:bg-input/50 h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5 glass border-border/30 hover:bg-white/20 hover:border-border/50 hover:text-current bg-transparent backdrop-blur-sm text-xs transition-all duration-200">Help with dry skin solutions</button>
          <button onclick="SkinCareChat.clearChat()" class="inline-flex items-center justify-center whitespace-nowrap font-medium disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border shadow-xs dark:bg-input/30 dark:border-input dark:hover:bg-input/50 h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5 glass border-border/30 hover:bg-red-500/20 hover:border-red-500/30 hover:text-red-300 bg-transparent backdrop-blur-sm text-xs transition-all duration-200">🗑️ Clear Chat</button>
        </div>
      </div>
      <div class="p-6 pt-0 border-t border-border/20 backdrop-blur-sm">
        <div class="flex items-center gap-3">
          <button data-slot="button" class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border shadow-xs hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 size-9 glass border-border/30 hover:bg-secondary/20 shrink-0 bg-transparent backdrop-blur-sm">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus w-4 h-4">
              <path d="M5 12h14"></path>
              <path d="M12 5v14"></path>
            </svg>
          </button>
          <div class="flex-1 relative">
            <input data-slot="input" class="file:text-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 flex h-9 w-full min-w-0 rounded-md border px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive glass border-border/30 bg-input/30 backdrop-blur-sm placeholder:text-muted-foreground/70 pr-12" placeholder="Ask me about skincare routines, products, skin concerns, or beauty advice..." value="" data-np-intersection-state="visible">
          </div>
          <button data-slot="button" class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive text-primary-foreground shadow-xs size-9 bg-primary/90 hover:bg-primary backdrop-blur-sm shrink-0" disabled="">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send w-4 h-4">
              <path d="M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"></path>
              <path d="m21.854 2.147-10.94 10.939"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
    <div class="text-center mt-6">
      <p class="text-xs text-muted-foreground">Powered by <span class="font-semibold text-primary">WeMakeAutomations</span>
      </p>
    </div>
  </div>
</div>

<script>
// AI Skincare Chat Application
const SkinCareChat = {
  isProcessing: false,
  chatHistory: JSON.parse(localStorage.getItem('skincare_chat') || '[]'),
  
  init() {
    this.updateCurrentTime();
    this.loadChatHistory();
    this.bindEvents();
    this.setupDragDrop();
  },
  
  updateCurrentTime() {
    const timeElement = document.querySelector('.text-xs.opacity-70');
    if (timeElement) {
      timeElement.textContent = new Date().toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
      });
    }
  },
  
  loadChatHistory() {
    const chatContainer = document.querySelector('.h-96.overflow-y-auto');
    if (this.chatHistory.length === 0) return;
    
    // Clear existing messages except welcome
    const welcomeMessage = chatContainer.querySelector('.flex.justify-start');
    chatContainer.innerHTML = '';
    if (welcomeMessage) {
      chatContainer.appendChild(welcomeMessage);
    }
    
    // Load saved messages
    this.chatHistory.forEach(item => {
      if (item.type === 'user') {
        this.addMessage(item.text, true, item.imageData ? this.dataURLtoFile(item.imageData) : null, false);
      } else {
        this.addMessage(item.text, false, null, false);
      }
    });
  },
  
  saveMessage(text, isUser, imageData = null) {
    const message = {
      type: isUser ? 'user' : 'bot',
      text: text,
      imageData: imageData,
      timestamp: Date.now()
    };
    this.chatHistory.push(message);
    localStorage.setItem('skincare_chat', JSON.stringify(this.chatHistory));
  },
  
  async fileToBase64(file) {
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.readAsDataURL(file);
    });
  },
  
  dataURLtoFile(dataurl) {
    const arr = dataurl.split(',');
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while(n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new File([u8arr], 'uploaded-image.jpg', {type: mime});
  },
  
  bindEvents() {
    const chatInput = document.querySelector('input[placeholder*="skincare"]');
    const sendBtn = document.querySelector('button[disabled] svg').parentElement;
    
    // Create hidden file input
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = 'image/*';
    fileInput.style.display = 'none';
    document.body.appendChild(fileInput);
    
    // Bind upload button
    const uploadBtn = document.querySelector('.lucide-plus').parentElement;
    uploadBtn.addEventListener('click', () => fileInput.click());
    
    // Bind file input
    fileInput.addEventListener('change', (e) => this.handleImageUpload(e));
    
    // Bind send button
    sendBtn.addEventListener('click', () => this.sendMessage());
    sendBtn.disabled = false; // Enable send button
    
    // Bind enter key
    chatInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });
    
    // Bind quick action buttons
    document.querySelectorAll('button[data-slot="button"]').forEach(btn => {
      if (btn.textContent.trim().length > 10) { // Only quick action buttons
        btn.addEventListener('click', () => {
          const text = btn.textContent.trim();
          chatInput.value = text;
          this.sendMessage();
        });
      }
    });
  },
  
  setupDragDrop() {
    const chatContainer = document.querySelector('.h-96.overflow-y-auto');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      chatContainer.addEventListener(eventName, this.preventDefaults, false);
    });
    
    ['dragenter', 'dragover'].forEach(eventName => {
      chatContainer.addEventListener(eventName, () => {
        chatContainer.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';
      }, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      chatContainer.addEventListener(eventName, () => {
        chatContainer.style.backgroundColor = '';
      }, false);
    });
    
    chatContainer.addEventListener('drop', (e) => {
      const files = e.dataTransfer.files;
      if (files.length > 0 && files[0].type.startsWith('image/')) {
        this.processImageFile(files[0]);
      }
    }, false);
  },
  
  preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
  },
  
  addMessage(text, isUser = false, imageFile = null, save = true) {
    const chatContainer = document.querySelector('.h-96.overflow-y-auto');
    
    const messageWrapper = document.createElement('div');
    messageWrapper.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = isUser 
      ? 'max-w-[80%] rounded-2xl px-4 py-3 bg-primary/90 backdrop-blur-sm text-primary-foreground ml-4'
      : 'max-w-[80%] rounded-2xl px-4 py-3 glass-message border border-border/30 mr-4 backdrop-blur-sm bg-background/20';
    
    let content = '';
    
    // Add image if present
    if (imageFile) {
      const imageUrl = URL.createObjectURL(imageFile);
      content += `<img src="${imageUrl}" style="max-width: 200px; border-radius: 8px; margin-bottom: 8px; display: block;">`;
    }
    
    // Process message content
    content += `<p class="text-sm leading-relaxed">${text}</p>`;
    
    // Add timestamp
    const time = new Date().toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
    content += `<span class="text-xs opacity-70 mt-1 block">${time}</span>`;
    
    // Add message status for user messages
    if (isUser) {
      content += `<div class="text-xs opacity-60 mt-1"><span class="status-text">sent</span></div>`;
      
      // Simulate "seen" status
      setTimeout(() => {
        const statusText = messageDiv.querySelector('.status-text');
        if (statusText) statusText.textContent = 'seen';
      }, Math.random() * 1000 + 800);
    }
    
    messageDiv.innerHTML = content;
    messageWrapper.appendChild(messageDiv);
    chatContainer.appendChild(messageWrapper);
    chatContainer.scrollTop = chatContainer.scrollHeight;
    
    // Save to localStorage
    if (save) {
      if (imageFile && isUser) {
        this.fileToBase64(imageFile).then(base64 => {
          this.saveMessage(text, isUser, base64);
        });
      } else {
        this.saveMessage(text, isUser);
      }
    }
  },
  

  
  addTypingIndicator() {
    const chatContainer = document.querySelector('.h-96.overflow-y-auto');
    
    const messageWrapper = document.createElement('div');
    messageWrapper.className = 'flex justify-start';
    messageWrapper.id = 'typingIndicator';
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'max-w-[80%] rounded-2xl px-4 py-3 glass-message border border-border/30 mr-4 backdrop-blur-sm bg-background/20';
    messageDiv.innerHTML = '<p class="text-sm leading-relaxed">typing...</p>';
    
    messageWrapper.appendChild(messageDiv);
    chatContainer.appendChild(messageWrapper);
    chatContainer.scrollTop = chatContainer.scrollHeight;
  },
  
  removeTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) indicator.remove();
  },
  
  calculateTypingDelay(messageLength) {
    const wordsPerMinute = 45;
    const charactersPerWord = 5;
    const typingTime = (messageLength / charactersPerWord / wordsPerMinute) * 60 * 1000;
    const thinkingTime = Math.random() * 2000 + 1000;
    const variation = Math.random() * 0.4 + 0.8;
    
    return Math.min(Math.max(typingTime * variation + thinkingTime, 1000), 8000);
  },
  
  calculatePreTypingDelay() {
    return Math.random() * 3000 + 1000;
  },
  
  async sendMessage() {
    if (this.isProcessing) return;
    
    const chatInput = document.querySelector('input[placeholder*="skincare"]');
    const message = chatInput.value.trim();
    
    if (!message) return;
    
    this.isProcessing = true;
    
    // Add user message
    this.addMessage(message, true);
    chatInput.value = '';
    
    // Pre-typing delay
    await new Promise(resolve => setTimeout(resolve, this.calculatePreTypingDelay()));
    
    // Add typing indicator
    this.addTypingIndicator();
    
    try {
      // Build conversation history for context
      console.log('Building conversation history from', this.chatHistory.length, 'messages');
      const conversationHistory = this.chatHistory.map(msg => ({
        role: msg.type === 'user' ? 'user' : 'assistant',
        content: msg.text
      }));
      console.log('Sending conversation history:', conversationHistory.length, 'messages');
      
      const response = await fetch('/api/v1/chat/message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          message: message,
          conversation_history: conversationHistory
        })
      });
      
      const data = await response.json();
      
      // Calculate realistic typing delay
      const typingDelay = this.calculateTypingDelay(data.response?.length || 100);
      await new Promise(resolve => setTimeout(resolve, typingDelay));
      
      // Remove typing indicator
      this.removeTypingIndicator();
      
      if (data.error) {
        this.addMessage('Sorry, I had trouble understanding that. Please try again.');
      } else {
        this.addMessage(data.response || 'I received your message!');
        
        // Handle recommendations if provided
        if (data.recommendations && data.recommendations.picks) {
          this.displayRecommendations(data.recommendations);
        }
      }
    } catch (error) {
      this.removeTypingIndicator();
      this.addMessage('Sorry, there was an error processing your message.');
      console.error('Chat error:', error);
    } finally {
      this.isProcessing = false;
    }
  },
  
  async handleImageUpload(event) {
    const file = event.target.files[0];
    if (file) {
      await this.processImageFile(file);
      event.target.value = ''; // Clear input
    }
  },
  
  async processImageFile(file) {
    if (this.isProcessing) return;
    
    // Validate file
    if (!file.type.startsWith('image/')) {
      this.addMessage('Please upload a valid image file.');
      return;
    }
    
    if (file.size > 5 * 1024 * 1024) {
      this.addMessage('Please upload an image smaller than 5MB.');
      return;
    }
    
    this.isProcessing = true;
    
    // Add user message with image
    this.addMessage('Analyzing your skin photo...', true, file);
    
    // Pre-typing delay
    await new Promise(resolve => setTimeout(resolve, this.calculatePreTypingDelay()));
    
    // Add typing indicator
    this.addTypingIndicator();
    
    try {
      // Build conversation history for context
      const conversationHistory = this.chatHistory.map(msg => ({
        role: msg.type === 'user' ? 'user' : 'assistant',
        content: msg.text
      }));
      
      const formData = new FormData();
      formData.append('photo', file);
      formData.append('conversation_history', JSON.stringify(conversationHistory));
      
      const response = await fetch('/api/v1/chat/message', {
        method: 'POST',
        body: formData
      });
      
      const data = await response.json();
      
      // Calculate typing delay for analysis response
      const typingDelay = this.calculateTypingDelay(data.response?.length || 200);
      await new Promise(resolve => setTimeout(resolve, typingDelay));
      
      // Remove typing indicator
      this.removeTypingIndicator();
      
      if (data.error) {
        this.addMessage('🔧 Sorry, there was an error analyzing your photo. Please try again.');
      } else {
        this.addMessage(data.response || 'I\'ve analyzed your photo!');
        
        // Analysis and recommendations are now included in the main response
      }
    } catch (error) {
      this.removeTypingIndicator();
      this.addMessage('🔧 Sorry, there was an error analyzing your photo. Please try again.');
      console.error('Photo analysis error:', error);
    } finally {
      this.isProcessing = false;
    }
  },
  

  
  clearChat() {
    console.log('Clearing chat - before:', this.chatHistory.length, 'messages');
    localStorage.removeItem('skincare_chat');
    this.chatHistory = [];
    console.log('Clearing chat - after:', this.chatHistory.length, 'messages');
    const chatContainer = document.querySelector('.h-96.overflow-y-auto');
    chatContainer.innerHTML = `
      <div class="flex justify-start">
        <div class="max-w-[80%] rounded-2xl px-4 py-3 glass-message border border-border/30 mr-4 backdrop-blur-sm bg-background/20">
          <p class="text-sm leading-relaxed">Hi, I'm Emma. What's going on with your skin that you'd like to talk about?</p>
          <span class="text-xs opacity-70 mt-1 block">${new Date().toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
          })}</span>
        </div>
      </div>
    `;
  }
};

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  SkinCareChat.init();
});

// Update the welcome message to be more personal
document.addEventListener('DOMContentLoaded', () => {
  const welcomeMessage = document.querySelector('.text-sm.leading-relaxed');
  if (welcomeMessage && welcomeMessage.textContent.includes('Emma')) {
    welcomeMessage.innerHTML = "Hi, I'm Emma. I help people understand their skin better and find the right approach for their concerns. You can ask me about skincare or upload a photo for analysis. What's going on with your skin that you'd like to talk about?";
  }
});
</script>