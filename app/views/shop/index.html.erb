<style>
  :root {
    --primary: #3b82f6;
    --secondary: #8b5cf6;
    --background: #ffffff;
    --foreground: #0f172a;
    --muted-foreground: #64748b;
    --border: #e2e8f0;
    --primary-foreground: #ffffff;
    --card-foreground: #0f172a;
  }

  body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    overflow-x: hidden;
  }

  /* Animations */
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(5deg); }
  }

  @keyframes float-delayed {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-15px) rotate(-3deg); }
  }

  @keyframes float-slow {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-10px) rotate(2deg); }
  }

  .animate-float { animation: float 6s ease-in-out infinite; }
  .animate-float-delayed { animation: float-delayed 8s ease-in-out infinite; }
  .animate-float-slow { animation: float-slow 10s ease-in-out infinite; }

  /* Glass effects */
  .glass {
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .glass-card-enhanced {
    backdrop-filter: blur(24px);
    -webkit-backdrop-filter: blur(24px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  .glass-message {
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }

  /* Container */
  .container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    position: relative;
    overflow: hidden;
  }

  /* Background elements */
  .bg-elements {
    position: absolute;
    inset: 0;
    z-index: -1;
  }

  .bg-element {
    position: absolute;
    border-radius: 50%;
    filter: blur(40px);
  }

  /* Main content */
  .main-content {
    width: 100%;
    max-width: 512px;
    margin: 0 auto;
    position: relative;
    z-index: 10;
  }

  /* Header */
  .header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .icon-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .icon {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-foreground);
  }

  .title {
    font-size: 1.875rem;
    font-weight: bold;
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    margin-bottom: 0.5rem;
  }

  .subtitle {
    color: var(--muted-foreground);
  }

  /* Chat card */
  .chat-card {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 12px;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    border: 0;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  /* Chat messages */
  .chat-messages {
    height: 384px;
    overflow-y: auto;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .message-container {
    display: flex;
  }

  .message-container.user {
    justify-content: flex-end;
  }

  .message-container.bot {
    justify-content: flex-start;
  }

  .message {
    max-width: 80%;
    border-radius: 16px;
    padding: 1rem;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .message.user {
    background: rgba(59, 130, 246, 0.9);
    color: var(--primary-foreground);
    margin-left: 1rem;
  }

  .message.bot {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    margin-right: 1rem;
    backdrop-filter: blur(8px);
  }

  .message-time {
    font-size: 0.75rem;
    opacity: 0.7;
    margin-top: 0.25rem;
    display: block;
  }

  /* Quick actions */
  .quick-actions {
    padding: 0 1.5rem 1rem;
  }

  .actions-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .action-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    white-space: nowrap;
    font-weight: 500;
    height: 32px;
    border-radius: 6px;
    gap: 0.375rem;
    padding: 0 0.75rem;
    backdrop-filter: blur(8px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    background: rgba(255, 255, 255, 0.1);
    color: var(--foreground);
    font-size: 0.75rem;
    transition: all 0.2s;
    cursor: pointer;
  }

  .action-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.5);
  }

  /* Input area */
  .input-area {
    padding: 1.5rem;
    padding-top: 0;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
  }

  .input-container {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .upload-btn {
    width: 36px;
    height: 36px;
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.3);
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(8px);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
    flex-shrink: 0;
  }

  .upload-btn:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .input-wrapper {
    flex: 1;
    position: relative;
  }

  .chat-input {
    width: 100%;
    min-width: 0;
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 0.75rem;
    font-size: 0.875rem;
    outline: none;
    backdrop-filter: blur(8px);
    background: rgba(255, 255, 255, 0.3);
    color: var(--foreground);
    transition: all 0.2s;
  }

  .chat-input::placeholder {
    color: rgba(100, 116, 139, 0.7);
  }

  .chat-input:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .send-btn {
    width: 36px;
    height: 36px;
    border-radius: 6px;
    border: none;
    background: rgba(59, 130, 246, 0.9);
    color: var(--primary-foreground);
    backdrop-filter: blur(8px);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
    flex-shrink: 0;
  }

  .send-btn:hover {
    background: var(--primary);
  }

  .send-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Footer */
  .footer {
    text-align: center;
    margin-top: 1.5rem;
  }

  .footer-text {
    font-size: 0.75rem;
    color: var(--muted-foreground);
  }

  .brand {
    font-weight: 600;
    color: var(--primary);
  }

  /* Scrollbar */
  .chat-messages::-webkit-scrollbar {
    width: 6px;
  }

  .chat-messages::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
  }

  .chat-messages::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
  }

  .chat-messages::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }
</style>

<div class="min-h-screen flex items-center justify-center p-4 relative overflow-hidden">
  <div class="container">
    <!-- Background elements -->
    <div class="bg-elements">
      <div class="bg-element animate-float" style="top: 80px; left: 40px; width: 128px; height: 128px; background: linear-gradient(135deg, rgba(255, 235, 59, 0.25), rgba(255, 193, 7, 0.2));"></div>
      <div class="bg-element animate-float-delayed" style="top: 160px; right: 80px; width: 96px; height: 96px; background: linear-gradient(135deg, rgba(33, 150, 243, 0.25), rgba(0, 188, 212, 0.2));"></div>
      <div class="bg-element animate-float-slow" style="bottom: 128px; left: 25%; width: 160px; height: 160px; background: linear-gradient(135deg, rgba(233, 30, 99, 0.25), rgba(244, 67, 54, 0.2));"></div>
      <div class="bg-element animate-float" style="bottom: 80px; right: 33.33%; width: 112px; height: 112px; background: linear-gradient(135deg, rgba(63, 81, 181, 0.2), rgba(103, 58, 183, 0.25));"></div>
      <div class="bg-element animate-float-delayed" style="top: 33.33%; left: 50%; width: 144px; height: 144px; background: linear-gradient(135deg, rgba(255, 152, 0, 0.2), rgba(255, 87, 34, 0.25));"></div>
      <div class="bg-element animate-float-slow" style="top: 240px; left: 80px; width: 80px; height: 80px; background: linear-gradient(135deg, rgba(233, 30, 99, 0.25), rgba(156, 39, 176, 0.2));"></div>
      <div class="bg-element animate-float" style="bottom: 160px; right: 40px; width: 120px; height: 120px; background: linear-gradient(135deg, rgba(0, 188, 212, 0.2), rgba(33, 150, 243, 0.25));"></div>
      <div class="bg-element animate-float-delayed" style="top: 320px; right: 25%; width: 104px; height: 104px; background: linear-gradient(135deg, rgba(255, 193, 7, 0.25), rgba(255, 152, 0, 0.2));"></div>
    </div>

    <div class="main-content">
      <!-- Header -->
      <div class="header">
        <div class="icon-container">
          <div class="icon glass">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z"></path>
              <path d="M20 3v4"></path>
              <path d="M22 5h-4"></path>
              <path d="M4 17v2"></path>
              <path d="M5 18H3"></path>
            </svg>
          </div>
        </div>
        <h1 class="title">AI Skin Aesthetics Expert</h1>
        <p class="subtitle">Your personal skincare consultant for healthy, radiant skin</p>
      </div>

      <!-- Chat Card -->
      <div class="chat-card glass-card-enhanced">
        <!-- Chat Messages -->
        <div class="chat-messages" id="chatMessages">
          <div class="message-container bot">
            <div class="message bot glass-message">
              <p>Hello! I'm your AI Skin Aesthetics Expert. I can help you with skincare routines, product recommendations, skin analysis, and personalized beauty advice. What skin concerns would you like to address today?</p>
              <span class="message-time" id="currentTime">05:13 PM</span>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
          <div class="actions-grid">
            <button class="action-btn" onclick="sendQuickMessage('What\'s the best skincare routine for my age?')">What's the best skincare routine for my age?</button>
            <button class="action-btn" onclick="sendQuickMessage('How to treat acne and breakouts?')">How to treat acne and breakouts?</button>
            <button class="action-btn" onclick="sendQuickMessage('Recommend anti-aging products')">Recommend anti-aging products</button>
            <button class="action-btn" onclick="sendQuickMessage('Help with dry skin solutions')">Help with dry skin solutions</button>
          </div>
        </div>

        <!-- Input Area -->
        <div class="input-area">
          <div class="input-container">
            <button class="upload-btn" onclick="document.getElementById('imageUpload').click()">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M5 12h14"></path>
                <path d="M12 5v14"></path>
              </svg>
            </button>
            <input type="file" id="imageUpload" accept="image/*" style="display: none;">
            <div class="input-wrapper">
              <input type="text" class="chat-input" id="chatInput" placeholder="Ask me about skincare routines, products, skin concerns, or beauty advice..." onkeypress="handleKeyPress(event)">
            </div>
            <button class="send-btn" id="sendBtn" onclick="sendMessage()">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"></path>
                <path d="m21.854 2.147-10.94 10.939"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Footer -->
      <div class="footer">
        <p class="footer-text">Powered by <span class="brand">WeMakeAutomations</span></p>
      </div>
    </div>
  </div>

  <script>
    // Set current time
    document.getElementById('currentTime').textContent = new Date().toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });

    // Chat functionality
    function addMessage(text, isUser = false, imageFile = null) {
      const chatMessages = document.getElementById('chatMessages');
      const messageContainer = document.createElement('div');
      messageContainer.className = `message-container ${isUser ? 'user' : 'bot'}`;
      
      const message = document.createElement('div');
      message.className = `message ${isUser ? 'user' : 'bot'}${!isUser ? ' glass-message' : ''}`;
      
      let content = `<p>${text}</p>`;
      
      if (imageFile) {
        const imageUrl = URL.createObjectURL(imageFile);
        content = `<img src="${imageUrl}" style="max-width: 200px; border-radius: 8px; margin-bottom: 8px;"><br>${content}`;
      }
      
      const time = new Date().toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
      });
      
      content += `<span class="message-time">${time}</span>`;
      message.innerHTML = content;
      
      messageContainer.appendChild(message);
      chatMessages.appendChild(messageContainer);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function addTypingIndicator() {
      const chatMessages = document.getElementById('chatMessages');
      const messageContainer = document.createElement('div');
      messageContainer.className = 'message-container bot';
      messageContainer.id = 'typingIndicator';
      
      const message = document.createElement('div');
      message.className = 'message bot glass-message';
      message.innerHTML = '<p>typing...</p>';
      
      messageContainer.appendChild(message);
      chatMessages.appendChild(messageContainer);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function removeTypingIndicator() {
      const typingIndicator = document.getElementById('typingIndicator');
      if (typingIndicator) {
        typingIndicator.remove();
      }
    }

    async function sendMessage() {
      const input = document.getElementById('chatInput');
      const message = input.value.trim();
      
      if (!message) return;
      
      // Add user message
      addMessage(message, true);
      input.value = '';
      
      // Add typing indicator
      addTypingIndicator();
      
      try {
        const response = await fetch('/api/v1/chat/message', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message: message })
        });
        
        const data = await response.json();
        
        // Remove typing indicator
        removeTypingIndicator();
        
        if (data.error) {
          addMessage('Sorry, I had trouble understanding that. Please try again.');
        } else {
          addMessage(data.response || 'I received your message!');
        }
      } catch (error) {
        removeTypingIndicator();
        addMessage('Sorry, there was an error processing your message.');
      }
    }

    function sendQuickMessage(text) {
      const input = document.getElementById('chatInput');
      input.value = text;
      sendMessage();
    }

    function handleKeyPress(event) {
      if (event.key === 'Enter') {
        sendMessage();
      }
    }

    // Image upload functionality
    document.getElementById('imageUpload').addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        addMessage('Analyzing your skin photo...', true, file);
        
        addTypingIndicator();
        
        const formData = new FormData();
        formData.append('photo', file);
        
        fetch('/api/v1/chat/message', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          removeTypingIndicator();
          
          if (data.error) {
            addMessage('🔧 Sorry, there was an error analyzing your photo. Please try again.');
          } else {
            addMessage(data.response || 'I\'ve analyzed your photo!');
          }
        })
        .catch(error => {
          removeTypingIndicator();
          addMessage('🔧 Sorry, there was an error analyzing your photo. Please try again.');
        });
      }
    });
  </script>
</div>